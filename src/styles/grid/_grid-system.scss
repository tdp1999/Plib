// Container mixins
@mixin make-container($padding-configs: $container-padding-x) {
  width: 100%;
  margin-right: auto;
  margin-left: auto;

  // Set padding base on media query, include xs. Container-fluid still have padding!
  @each $breakpoint, $container-padding in $padding-configs {
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      padding-left: $container-padding;
      padding-right: $container-padding;
    }
  }
}

/* Mixin make-container-max-width is deprecated in v5. Define max width container
   direct inside grid scss  */

// Make row (negative) margin dynamic
@mixin make-row($gutter) {
  display: flex;
  flex-wrap: wrap;
  margin-right: divide($gutter, -2);
  margin-left: divide($gutter, -2);
}

@mixin make-col-ready($gutter){
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  position: relative;
  flex-shrink: 0;
  //width: 100%;
  //max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: divide($gutter, 2);
  padding-left: divide($gutter, 2);
  padding-bottom: $gutter;
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(divide($size, $columns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  //max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: divide($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

// All breakpoint have same columns: 12
@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {

    $infix: breakpoint-infix($breakpoint, $breakpoints);

    $gutter: map-get($gutters, $breakpoint);

    @include media-breakpoint-up($breakpoint, $breakpoints) {

      .row { @include make-row($gutter); }

      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      .col#{$infix}, .col#{$infix}-auto, [class*=col-] {
        @include make-col-ready($gutter);
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col-ready($gutter);
          @include make-col($i, $columns);
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }

    }
  }
}